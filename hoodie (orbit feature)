
<div id="3d-model-container" style="width: 100%; height: 500px;"></div>
<script src="https://cdn.jsdelivr.net/npm/three@0.129.0/build/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.129.0/examples/js/controls/OrbitControls.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.129.0/examples/js/loaders/GLTFLoader.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function () {
    var container = document.getElementById('3d-model-container');
    var scene = new THREE.Scene();
    var camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
    var renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(container.clientWidth, container.clientHeight);
    container.appendChild(renderer.domElement);

    var controls = new THREE.OrbitControls(camera, renderer.domElement);

    var loader = new THREE.GLTFLoader();
    loader.load('https://hoodie3dmodel.s3.us-west-1.amazonaws.com/scene.gltf', function (gltf) {
        var model = gltf.scene;

        // Aggressively scale the model
        model.scale.set(15, 15, 15);

        // Center the model
        var bbox = new THREE.Box3().setFromObject(model);
        var cent = bbox.getCenter(new THREE.Vector3());
        model.position.copy(cent).multiplyScalar(-1);

        scene.add(model);

        // Adjust camera position based on bounding box size
        var size = bbox.getSize(new THREE.Vector3());
        var maxDim = Math.max(size.x, size.y, size.z);
        var fov = camera.fov * (Math.PI / 180);
        var cameraZ = Math.abs(maxDim / 2 * Math.tan(fov * 2));

        camera.position.z = cameraZ * 1.5; // Set the camera position with a margin

        controls.maxDistance = cameraZ * 3;
        controls.minDistance = cameraZ / 2;

        var animate = function () {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        };

        animate();
    }, undefined, function (error) {
        console.error(error);
    });

    window.addEventListener('resize', function () {
        camera.aspect = container.clientWidth / container.clientHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(container.clientWidth, container.clientHeight);
    });
});
</script>
